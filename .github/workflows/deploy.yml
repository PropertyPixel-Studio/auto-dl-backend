name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set version
        id: set-version
        run: echo "version=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        
      - name: Notify Deployment Start
        run: |
          START_MESSAGE="üöÄ *PROD Deploy / ‚òï AutoDL Backend*\n${{ github.actor }} started new deploy of branch \`${{ github.ref_name }}\` to production.\nCommit: \`${{ github.event.head_commit.message }}\`\n[${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}](Pipeline Link)"
          ESCAPED_START_MESSAGE=$(echo "$START_MESSAGE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -s -X POST -H 'Content-Type: application/json' \
               -d "{\"text\": \"$ESCAPED_START_MESSAGE\"}" \
               '${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}' || echo "Warning: Failed to send start notification."

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: 'maven'
      
      - name: Build with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests --batch-mode --no-transfer-progress
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image and cache layers
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: auto-dl-backend:${{ steps.set-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Save Docker image to tarball
        run: |
          docker save auto-dl-backend:${{ steps.set-version.outputs.version }} | gzip > auto-dl-backend.tar.gz
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: auto-dl-backend
          path: |
            auto-dl-backend.tar.gz
            docker-compose.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: auto-dl-backend
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Copy files to server
        run: |
          # Create deployment directory
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "mkdir -p ~/autodl"
          
          # Copy files
          scp -C auto-dl-backend.tar.gz docker-compose.yml ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }}:/home/${{ secrets.AZURE_USER }}/autodl/
      
      - name: Prepare server
        run: |
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "bash -s" << 'EOF'
            # Create application.properties in a separate directory to avoid losing it
            mkdir -p /home/$USER/autodl/config

            # Backup application.properties file if it exists
            if [ -f /home/$USER/autodl/config/application.properties ]; then
              cp /home/$USER/autodl/config/application.properties /home/$USER/autodl/config/application.properties.backup
            fi
          EOF
      
      - name: Deploy application
        env:
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "bash -s" << EOF
            cd /home/\$USER/autodl
            
            # Free up disk space 
            echo "Cleaning up Docker resources..."
            docker system prune -af --volumes
            
            # Load Docker image
            echo "Loading Docker image..."
            docker load < auto-dl-backend.tar.gz
            
            # Create application.properties from GitHub secret
            echo "${APPLICATION_PROPERTIES}" > /home/\$USER/autodl/config/application.properties
            
            # Create the external network if it doesn't exist
            docker network inspect autodl-network >/dev/null 2>&1 || docker network create autodl-network
            
            # Update docker-compose.yml with versioned image
            VERSION="${VERSION}"
            sed -i 's|build:|image: auto-dl-backend:'"${VERSION}"'|g' docker-compose.yml
            sed -i '/dockerfile:/d' docker-compose.yml
            sed -i '/context:/d' docker-compose.yml
            
            # Add volume mount for application.properties
            sed -i '/ports:/i \ \ \ \ volumes:\n\ \ \ \ \ \ - ~/autodl/config:/app/config' docker-compose.yml
            
            # Display the modified docker-compose.yml for debugging
            echo "Modified docker-compose.yml:"
            cat docker-compose.yml
            
            # Stop and remove any existing containers
            docker compose -f docker-compose.yml down || true
            
            # Start the application
            docker compose -f docker-compose.yml up -d
          EOF
      
      - name: Wait for app to start
        run: sleep 30
        
      - name: Check if application container is running
        continue-on-error: true
        run: |
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "docker ps"
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "docker ps | grep auto-dl-backend || echo 'Container not found'"
      
      - name: Check logs if container is not running
        continue-on-error: true
        run: |
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "docker compose -f /home/${{ secrets.AZURE_USER }}/autodl/docker-compose.yml logs --tail=50"
          
      - name: Verify application started successfully
        continue-on-error: true
        run: ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "curl -v http://localhost:50021/actuator/health || echo 'Health check failed'"
        
      - name: Set permissions on autodl directory
        continue-on-error: true
        run: ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "chmod -R 755 /home/${{ secrets.AZURE_USER }}/autodl"
      
      - name: Notify Deployment Result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_ICON="‚úÖ"
            RESULT_TEXT="successfully deployed"
          else
            STATUS_ICON="‚ùå"
            RESULT_TEXT="FAILED to deploy"
          fi
          
          RESULT_MESSAGE="$STATUS_ICON *PROD Deploy / ‚òï AutoDL Backend*\n${{ github.actor }} $RESULT_TEXT branch \`${{ github.ref_name }}\` to production.\nCommit: \`${{ github.event.head_commit.message }}\`\n[${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}](Pipeline Link)"
          ESCAPED_RESULT_MESSAGE=$(echo "$RESULT_MESSAGE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          
          curl -s -X POST -H 'Content-Type: application/json' \
               -d "{\"text\": \"$ESCAPED_RESULT_MESSAGE\"}" \
               '${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}' || echo "Warning: Failed to send result notification."