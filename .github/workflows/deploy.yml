name: Deploy to Azure

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/workflows/manual-deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Create deployment package
        run: |
          # Create a zip file of the repository and build artifacts
          zip -r deploy.zip . -x "*.git*" "*target/classes*" "*target/generated-sources*" "*target/maven-*" "*target/test-*"

      - name: Set branch name
        id: branch_name
        run: echo "BRANCH_NAME=main" >> $GITHUB_ENV

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AZURE_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare server
        env:
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        run: |
          # Install Docker and Docker Compose if needed
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "bash -s" << EOF
          export BRANCH_NAME="${BRANCH_NAME}"
          # Install unzip if not already installed
          if ! command -v unzip &> /dev/null; then
            echo "Installing unzip..."
            sudo apt-get update
            sudo apt-get install -y unzip
          fi

          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce
            sudo usermod -aG docker $USER
          fi

          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Create application directories with sudo
          sudo mkdir -p /home/$USER/autodl/auto-dl-backend
          sudo chown -R $USER:$USER /home/$USER/autodl

          # Backup application.properties file if it exists
          if [ -f /home/$USER/autodl/auto-dl-backend/src/main/resources/application.properties ]; then
            cp /home/$USER/autodl/auto-dl-backend/src/main/resources/application.properties /tmp/application.properties.backup
            echo "Backed up existing application.properties file"
          fi
          EOF

      - name: Copy deployment package
        run: |
          # Copy the zip file to the server
          scp deploy.zip ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }}:/home/${{ secrets.AZURE_USER }}/

      - name: Deploy application
        env:
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          TECDOC_API_KEY: ${{ secrets.TECDOC_API_KEY }}
          DARMA_URL: ${{ secrets.DARMA_URL }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        run: |
          # Deploy the application
          ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_SERVER_IP }} "bash -s" << EOF
          # Use the actual home directory of the user
          AZURE_HOME="/home/\$USER"
          echo "Home directory: \$AZURE_HOME"
          cd \$AZURE_HOME
          echo "Current directory: \$(pwd)"

          # Verify the zip file exists
          if [ ! -f deploy.zip ]; then
            echo "Error: deploy.zip not found in \$(pwd)!"
            ls -la
            exit 1
          fi

          # Clean the target directory while preserving application.properties
          echo "Cleaning target directory..."
          find \$AZURE_HOME/autodl/auto-dl-backend -mindepth 1 -not -name 'application.properties' -delete || true

          # Extract the deployment package
          echo "Extracting deployment package..."
          unzip -o deploy.zip -d \$AZURE_HOME/autodl/auto-dl-backend
          rm deploy.zip

          # Restore application.properties file if it was backed up
          if [ -f /tmp/application.properties.backup ]; then
            echo "Restoring application.properties from backup..."
            mkdir -p \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/
            cp /tmp/application.properties.backup \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            rm /tmp/application.properties.backup
          else
            # Create application.properties file from GitHub secrets
            echo "Creating application.properties file from GitHub secrets..."
            # Parse the DATABASE_URL to extract components
            DB_URL=\$(echo "${DATABASE_URL}" | sed -E 's|postgres://([^:]+):([^@]+)@([^:]+):([^/]+)/(.+)$|jdbc:postgresql://\3:\4/\5|')
            DB_USERNAME=\$(echo "${DATABASE_URL}" | sed -E 's|postgres://([^:]+):([^@]+)@.+$|\1|')
            DB_PASSWORD=\$(echo "${DATABASE_URL}" | sed -E 's|postgres://[^:]+:([^@]+)@.+$|\1|')

            # Create directory for application.properties if it doesn't exist
            mkdir -p \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/

            # Create application.properties file
            echo "spring.application.name=auto-dl-be" > \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "# Postgres DB" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "spring.datasource.url=\${DB_URL}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "spring.datasource.username=\${DB_USERNAME}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "spring.datasource.password=\${DB_PASSWORD}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "spring.jpa.hibernate.ddl-auto=update" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "#Others" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "server.port=${SERVER_PORT}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "darma.url=${DARMA_URL}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "tecdoc.api.url=https://webservice.tecalliance.services/pegasus-3-0/services/TecdocToCatDLB.soapEndpoint" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "tecdoc.api.key=${TECDOC_API_KEY}" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
            echo "filter.apikey=BTtW4BWlUrDkbloYTQrIsvNcaTNoOGc7y2Wb2TpjIV8=" >> \$AZURE_HOME/autodl/auto-dl-backend/src/main/resources/application.properties
          fi

          # Build and start the application
          cd \$AZURE_HOME/autodl/auto-dl-backend
          echo "Building and starting the application..."
          echo "Current directory: \$(pwd)"
          ls -la

          # Check if docker-compose.yml exists
          if [ ! -f docker-compose.yml ]; then
            echo "Error: docker-compose.yml not found!"
            exit 1
          fi

          # Create the external network if it doesn't exist
          sudo docker network inspect autodl-network >/dev/null 2>&1 || sudo docker network create autodl-network

          # Stop and remove any existing containers
          sudo docker-compose -f docker-compose.yml down || true

          # Build and start the application
          sudo docker-compose -f docker-compose.yml build
          sudo docker-compose -f docker-compose.yml up -d

          echo "Deployment completed successfully!"
          EOF